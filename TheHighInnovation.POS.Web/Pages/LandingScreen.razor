@page "/landing-page"
@using TheHighInnovation.POS.Web.Model.Response.Permission
@using TheHighInnovation.POS.Web.Models
@using TheHighInnovation.POS.Web.Services.Base
@inject NavigationManager NavManager;
@inject BaseService baseService

<div class="landingpage container">
    <div class="row">
        @if (landingPage != null)
        {
            foreach (var item in landingPage)
            {
                <div class="col">
                    <button @onclick="@(async () => await ExecuteAction(item.Action))" class="togobuttons">
                        <i class="@item.Icon" aria-hidden="true"></i>
                    </button>
                    <p class="label">@item.Name</p>
                </div>
            }
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<GetLandingPage> landingPage { get; set; }

    private readonly Dictionary<string, Func<Task>> _actionMapping;

    public LandingScreen()
    {
        _actionMapping = new Dictionary<string, Func<Task>>
        {
            // { "SwitchToCashierPanel", SwitchToCashierPanel },
            { "SwitchToReservation", SwitchToReservation },
            { "SwitchToAdmin", SwitchToAdmin },
            { "SwitchToInventory", SwitchToInventory },
            { "SwitchToSales", SwitchToSales },
            { "SwitchToDashboard", SwitchToDashboard },
            { "SwitchToDashboardRestro", SwitchToDashboardRestro }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _globalState = await baseService.GetGlobalState();
        
        await FetchLandingScreen();
    }

    private async Task FetchLandingScreen()
    {
        var response = await baseService.GetAsync<Derived<List<GetLandingPage>>>("permission/get-landing-screen");

        if (response != null)
        {
            landingPage = response.Result;
        }
    }

    private async Task ExecuteAction(string actionName)
    {
        if (_actionMapping.ContainsKey(actionName))
        {
            await _actionMapping[actionName]();
        }
    }

    // private Task SwitchToCashierPanel()
    // {
    //     _globalState.PageNumber = 2;
    //     NavManager.NavigateTo("/cashier-corner");
    //     return Task.CompletedTask;
    // }

    private Task SwitchToReservation()
    {
        _globalState.PageNumber = 3;
        NavManager.NavigateTo("/reservation");
        return Task.CompletedTask;
    }

    private Task SwitchToAdmin()
    {
        _globalState.PageNumber = 1;
        NavManager.NavigateTo("/category");
        return Task.CompletedTask;
    }

    private Task SwitchToInventory()
    {
        _globalState.PageNumber = 4;
        NavManager.NavigateTo("/vendor");
        return Task.CompletedTask;
    }

    private Task SwitchToSales()
    {
        _globalState.PageNumber = 5;
        NavManager.NavigateTo("/sale");
        return Task.CompletedTask;
    }

    private Task SwitchToDashboard()
    {
        _globalState.PageNumber = 6;
        NavManager.NavigateTo("/admin-dashboard");
        return Task.CompletedTask;
    }

    private Task SwitchToDashboardRestro()
    {
        _globalState.PageNumber = 6;
        NavManager.NavigateTo("/restro-dashboard");
        return Task.CompletedTask;
    }
}
